package poo.ecommerce;

import java.sql.*;
import java.util.Scanner;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class ClienteADO {



    // Linhas 13 a 104 comentadas por: Sherlyene Vitória Mauriz de Oliveira.

    public static void createCliente() {
        Scanner scanner = new Scanner(System.in);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        System.out.println("Insira o nome do Cliente: ");
        String nome = scanner.nextLine();

        System.out.print("Insira o e-mail do Cliente: ");
        String email = scanner.nextLine();

        System.out.print("Insira o telefone do Cliente: ");
        String telefone = scanner.nextLine();

        System.out.print("Insira o CPF do Cliente: ");
        String cpf = scanner.nextLine();
        String nome, email, telefone, cpf;
        // Loop para garantir que o nome não esteja vazio ou em branco
        while (true) {
            System.out.print("Insira o nome do Cliente: ");
            nome = scanner.nextLine();
            // Verifica se o campo está vazio ou contém apenas espaços em branco
            if (!nome.isBlank()) {
                break; // Sai do loop se o nome for válido
            } else {
                System.out.println("Nome inválido.");
            }
        }

        // Loop para garantir que o email seja válido.
        while (true){
            System.out.print("Insira o e-mail do Cliente: ");
            email = scanner.nextLine();

            // Verifica se o email está vazio ou contém apenas espaços em branco
            if(!email.isBlank() && email.matches("^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2})?$")){
                break; // Sai do loop se o email for válido
            }else {
                System.out.println("Email inválido.");
            }
        }


        // Loop para garantir que o telefone não esteja vazio ou em branco
        while (true){
            System.out.print("Insira o telefone do Cliente: ");
            telefone = scanner.nextLine();

            // Verifica se o email está vazio ou contém apenas espaços em branco
            if(!telefone.isBlank() && telefone.matches("^\\(\\d{2}\\)\\d{9}$") || telefone.matches("^\\d{11}$")){
                break; // Sai do loop se o telefone for válido
            }else {
                System.out.println("Telefone inválido.");
            }
        }

        System.out.print("Insira a data de cadastro (dd/MM/yyyy): ");
        String data_cadastroStr = scanner.nextLine();
        LocalDate data_cadastro = LocalDate.parse(data_cadastroStr, formatter);
        // Loop para garantir que o cpf seja válido
        while (true){
            System.out.print("Insira o CPF do Cliente: ");
            cpf = scanner.nextLine();

            // Verifica se o email é válido
            if(!cpf.isBlank() && cpf.matches("^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$") || cpf.matches("^\\d{11}$")){
                break; // Sai do loop se o cpf for válido
            }else {
                System.out.println("CPF inválido.");
            }
        }

        // Validação do campo Data de Cadastro
        LocalDate data_cadastro;
        while (true) {
            System.out.print("Insira a data de cadastro (dd/MM/yyyy): ");
            String data_cadastroStr = scanner.nextLine();
            try {
                data_cadastro = LocalDate.parse(data_cadastroStr, formatter);
                break; // Sai do loop se a data for válida
            } catch (DateTimeParseException e) {
                System.out.println("Data inválida. Por favor, insira no formato dd/MM/yyyy.");
            }
        }


        // Código em SQL para ser executado
        String sql = "INSERT INTO clientes (nome, email, telefone, cpf, data_cadastro) VALUES (?, ?, ?, ?, ?)";

        // Tenta conectar com o banco de dados
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            // Prepara a instrunção SQL para ser executada
            PreparedStatement stmt = conexao.prepareStatement(sql)) {
            stmt.setString(1, nome);
            stmt.setString(2, email);
            stmt.setString(3, telefone);
@@ -37,6 +99,8 @@ public class ClienteADO {
            stmt.executeUpdate();
            System.out.println("Cliente inserido com sucesso.");
        } catch (SQLException ex) {

            // Exibe mensagem de erro caso não consiga inserir cliente
            System.out.println("Erro ao inserir cliente: " + ex.getMessage());
        }
    }


    public static void readClientes() {
        // Define a consulta SQL  e seleciona todos os registros da tabela clientes
        String sql = "SELECT * FROM clientes;";

        //Conexão com o banco 
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            ResultSet rs = stmt.executeQuery();

            //Verifica se há algum registro encontrado
            if (!rs.isBeforeFirst()) {
                //Caso nao, imprime a seguinte mensagem.
                System.out.println("Nenhum cliente encontrado.");
            }
            //Iteração
            while (rs.next()) {
                //Obtem os dados dos clientes a partir do ResultSet usando os nomes das colunas
                int idCliente = rs.getInt("idCliente");
                String nome = rs.getString("nome");
                String email = rs.getString("email");
                String telefone = rs.getString("telefone");
                String cpf = rs.getString("cpf");
                java.sql.Date dataCadastro = rs.getDate("data_cadastro");

                // Imprime os dados do cliente no console
                System.out.println("");
                System.out.println("Id: " + idCliente);
                System.out.println("Dados do cliente " + nome + ":");
                System.out.println("Email: " + email);
                System.out.println("Telefone: " + telefone);
                System.out.println("CPF: " + cpf);
                System.out.println("Data de cadastro: " + dataCadastro);
            }
        } catch (SQLException ex) {
            //Caso haja erro na consulta SQL, captura a exceção e imprime a mensagem de erro
            System.out.println("Erro na consulta SQL. ERRO: " + ex.getMessage());
        }
    }
    public static void readClienteID() {
        //scanner para ler a entrada do usuario
        Scanner scanner = new Scanner(System.in);
        //Usuario digita o ID do cliente
        System.out.print("Digite o ID do cliente que deseja pesquisar: ");
        int idCliente = scanner.nextInt();
        String sql = "SELECT * FROM clientes WHERE idCliente = ?;";
        // obtem a conexao com o banco usando a classe ConexaoBanco
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
                //id do cliente como parametro de consulta
            stmt.setInt(1, idCliente);
            ResultSet rs = stmt.executeQuery();
            // verifica se nao ha nenhum registro encontrado, caso nao, imprime a mensagem informando que nenhum cliente foi registrado.
            if (!rs.isBeforeFirst()) {
                System.out.println("Nenhum cliente encontrado com o ID: " + idCliente);
            } else {
                while (rs.next()) {
                    //iteracao sobre os registros existentes
                    String nome = rs.getString("nome");
                    String email = rs.getString("email");
                    String telefone = rs.getString("telefone");
                    String cpf = rs.getString("cpf");
                    java.sql.Date dataCadastro = rs.getDate("data_cadastro");
                    // imprime os dados do cliente.
                    System.out.println("");
                    System.out.println("Id: " + idCliente);
                    System.out.println("Dados do cliente " + nome + ":");
                    System.out.println("Email: " + email);
                    System.out.println("Telefone: " + telefone);
                    System.out.println("CPF: " + cpf);
                    System.out.println("Data de cadastro: " + dataCadastro);
                }
            }
        } catch (SQLException ex) {
            // em caso de erro na consulta, captura a execucao e imprime a mensagem de erro
            System.out.println("Erro na consulta SQL. ERRO: " + ex.getMessage());
        }
    }

    //linhas 204 a 394 comentadas por Ana Eduarda Raposo Medeiros
    public static void updateCliente() {
        //scanner para ler a entrada do usuario 
        Scanner scanner = new Scanner(System.in);

        //solicita e lê o ID  do cliente
        System.out.print("Digite o ID do cliente: ");
        int idCliente = scanner.nextInt();
        scanner.nextLine();

        // verifica se o cliente e real
        if (verifyClientes(idCliente)) {

            // Aqui, define que a consulta SQL sera com base no ID
            String selectSql = "SELECT nome, email, telefone, cpf, data_cadastro FROM clientes WHERE idCliente = ?";

            //estabelece, obtem a conexao com o banco de dados e prepara a instrucao SQL 
            try (Connection conexao = ConexaoBanco.obterConexao();
                 PreparedStatement selectStmt = conexao.prepareStatement(selectSql)) {

                    //define o ID do cliente como parametro de consulta
                selectStmt.setInt(1, idCliente);
                ResultSet rs = selectStmt.executeQuery();// executa a consulta e obtem resultados 

                //verifica se o cliente foi encontrado
                if (rs.next()) {
                    //exibe os dados atuais dos clientes
                    System.out.println("Dados atuais do cliente:");
                    System.out.println("Nome: " + rs.getString("nome"));
                    System.out.println("Email: " + rs.getString("email"));
                    System.out.println("Telefone: " + rs.getString("telefone"));
                    System.out.println("CPF: " + rs.getString("cpf"));
                    System.out.println("Data de Cadastro: " + rs.getDate("data_cadastro"));
                } else {
                    
                    // se nao houver registros, imprime uma mensagem informando que o cliente nao foi encontrado
                    System.out.println("Cliente não encontrado.");
                    return;
                }
                
                // definicao do formato de leitura da data 
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                
                //solicita as informacoes atualizadas dos clientes
                System.out.println("Digite as atualizações do cliente: ");
                System.out.print("Insira o novo email do cliente: ");
                String email = scanner.nextLine();
                System.out.print("Insira o novo número de telefone do cliente: ");
                String telefone = scanner.nextLine();
                System.out.print("Insira a nova data de cadastro (dd/MM/yyyy): ");
                String data_cadastroStr = scanner.nextLine();

                // Validando a data de cadastro
            LocalDate data_cadastro;
            try {
                data_cadastro = LocalDate.parse(data_cadastroStr, formatter);
                if (data_cadastro.isAfter(LocalDate.now())) {
                    System.out.println("A data de cadastro não pode ser uma data futura.");
                    return;
                }
            } catch (DateTimeParseException e) {
                System.out.println("Data inválida. O formato deve ser dd/MM/yyyy.");
                return;
            }

            System.out.print("Insira o novo CPF do cliente: ");
            String cpf = scanner.nextLine();

            // Valida o email
            if (!isValidEmail(email)) {
                System.out.println("Email inválido.");
                return;
            }

            // Valida o telefone
            if (!isValidPhone(telefone)) {
                System.out.println("Número de telefone inválido.");
                return;
            }

            // Valida o CPF
            if (!isValidCPF(cpf)) {
                System.out.println("CPF inválido.");
                return;
            }


                //converte a string da data para um objeto LocalDate usando o formulario definido
                LocalDate data_cadastro = LocalDate.parse(data_cadastroStr, formatter);
                System.out.print("Insira o novo CPF do cliente: ");
                String cpf = scanner.nextLine();

                //define a consulta SQL para a atualizacao
                String updateSql = "UPDATE clientes SET email = ?, telefone = ?, cpf = ?, data_cadastro = ? WHERE idCliente = ?";
                try (PreparedStatement updateStmt = conexao.prepareStatement
                //define os valores dos parametros na consulta de atualizacao 
                (updateSql)) {
                    updateStmt.setString(1, email);
                    updateStmt.setString(2, telefone);
                    updateStmt.setString(3, cpf);
                    updateStmt.setDate(4, Date.valueOf(data_cadastro));
                    updateStmt.setInt(5, idCliente);

                    //executa a atualizacao e obtem o numero de linhas afetadas
                    int linhasAfetadas = updateStmt.executeUpdate();
                    //verifica se a atualizacao foi bem sucedida
                    if (linhasAfetadas > 0) {
                        System.out.println(linhasAfetadas + " cliente atualizado com sucesso.");
                    } else {
                        System.out.println("Nenhum cliente foi atualizado.");
                    }
                }
            } catch (SQLException ex) {
                // em caso de erro, captura a execao e imprime a mensagem de erro
                System.out.println("Erro ao acessar o banco de dados: " + ex.getMessage());
            }
            } else {
            //se o cliente nao for encontrado, imprime uma mensagem de erro, informando que a atualizacao nao foi bem sucedida.
            System.out.println("Cliente não encontrado. Atualização não realizada.");
            }
            }
         // Método para validar o email
            private static boolean isValidEmail(String email) {
            String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
             }

        // Método para validar o telefone
            private static boolean isValidPhone(String telefone) {
             String phoneRegex = "^\\+?[0-9]{10,15}$"; // Exemplo simples para validação de telefone.
          return telefone.matches(phoneRegex);
         }

        // Método para validar o CPF (apenas uma verificação simples)
            private static boolean isValidCPF(String cpf) {
        // Aqui você pode implementar uma lógica mais complexa para validar o CPF.
        return cpf.matches("\\d{11}"); // Valida se o CPF tem 11 dígitos.
         }

        public static void deleteCliente() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Digite o ID do cliente a ser deletado: ");
            int idCliente = scanner.nextInt();

            // Verifica se o cliente existe no banco de dados.
        if (verifyClientes(idCliente)) {
            //SQL para deletar o telefone 
            String sql = "DELETE FROM clientes WHERE idCliente = ?;";
            //Obtem a conexao com o banco de dados
            try (Connection conexao = ConexaoBanco.obterConexao();
            //prepara a instrucao SQL
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {
                    //define o id do cliente a ser deletado
                stmt.setInt(1, idCliente);
                int linhasAfetadas = stmt.executeUpdate();
                //// Executa a instrução SQL e obtém o número de linhas afetadas.
                if (linhasAfetadas > 0) {
                    System.out.println("Cliente deletado com sucesso.");
                } else {
                    System.out.println("Nenhum cliente foi deletado.");
                }
            } catch (SQLException ex) {
                System.out.println("Erro ao deletar cliente: " + ex.getMessage());
            }
        } else {
            System.out.println("Cliente não encontrado.");
        }
    }
    public static boolean verifyClientes(int idCliente) {
         // SQL para contar o número de clientes com o ID fornecido.
        String sql = "SELECT COUNT(*) FROM clientes WHERE idCliente = ?";
         // Obtém a conexão com o banco de dados.
        try (Connection conexao = ConexaoBanco.obterConexao();
        // Prepara a instrução SQL.
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
        // Define o ID do cliente a ser verificado
            stmt.setInt(1, idCliente);
            ResultSet rs = stmt.executeQuery();
        // Executa a consulta e obtém o resultado.
            if (rs.next()) {
                return rs.getInt(1) > 0; // Retorna verdadeiro se o cliente existir (contagem > 0).
            }
        } catch (SQLException ex) {
            System.out.println("Erro ao verificar cliente: " + ex.getMessage());
        }
        return false;  // Retorna falso se não for possível verificar o cliente.
    }
}
