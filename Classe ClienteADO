package poo.ecommerce;

import java.sql.*;
import java.util.Scanner;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class ClienteADO {

    // Linhas 13 a 104 comentadas por: Sherlyene Vitória Mauriz de Oliveira.

    public static void createCliente() {
        Scanner scanner = new Scanner(System.in);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        String nome, email, telefone, cpf;
        // Loop para garantir que o nome não esteja vazio ou em branco
        while (true) {
            System.out.print("Insira o nome do Cliente: ");
            nome = scanner.nextLine();
            // Verifica se o campo está vazio ou contém apenas espaços em branco
            if (!nome.isBlank()) {
                break; // Sai do loop se o nome for válido
            } else {
                System.out.println("Nome inválido.");
            }
        }

        // Loop para garantir que o email seja válido.
        while (true){
            System.out.print("Insira o e-mail do Cliente: ");
            email = scanner.nextLine();

            // Verifica se o email está vazio ou contém apenas espaços em branco
            if(!email.isBlank() && email.matches("^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2})?$")){
                break; // Sai do loop se o email for válido
            }else {
                System.out.println("Email inválido.");
            }
        }


        // Loop para garantir que o telefone não esteja vazio ou em branco
        while (true){
            System.out.print("Insira o telefone do Cliente: ");
            telefone = scanner.nextLine();

            // Verifica se o email está vazio ou contém apenas espaços em branco
            if(!telefone.isBlank() && telefone.matches("^\\(\\d{2}\\)\\d{9}$") || telefone.matches("^\\d{11}$")){
                break; // Sai do loop se o telefone for válido
            }else {
                System.out.println("Telefone inválido.");
            }
        }

        // Loop para garantir que o cpf seja válido
        while (true){
            System.out.print("Insira o CPF do Cliente: ");
            cpf = scanner.nextLine();

            // Verifica se o email é válido
            if(!cpf.isBlank() && cpf.matches("^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$") || cpf.matches("^\\d{11}$")){
                break; // Sai do loop se o cpf for válido
            }else {
                System.out.println("CPF inválido.");
            }
        }

        // Validação do campo Data de Cadastro
        LocalDate data_cadastro;
        while (true) {
            System.out.print("Insira a data de cadastro (dd/MM/yyyy): ");
            String data_cadastroStr = scanner.nextLine();
            try {
                data_cadastro = LocalDate.parse(data_cadastroStr, formatter);
                break; // Sai do loop se a data for válida
            } catch (DateTimeParseException e) {
                System.out.println("Data inválida. Por favor, insira no formato dd/MM/yyyy.");
            }
        }


        // Código em SQL para ser executado
        String sql = "INSERT INTO clientes (nome, email, telefone, cpf, data_cadastro) VALUES (?, ?, ?, ?, ?)";

        // Tenta conectar com o banco de dados
        try (Connection conexao = ConexaoBanco.obterConexao();

             // Prepara a instrunção SQL para ser executada
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            stmt.setString(1, nome);
            stmt.setString(2, email);
            stmt.setString(3, telefone);
            stmt.setString(4, cpf);
            stmt.setDate(5, Date.valueOf(data_cadastro));
            stmt.executeUpdate();
            System.out.println("Cliente inserido com sucesso.");
        } catch (SQLException ex) {

            // Exibe mensagem de erro caso não consiga inserir cliente
            System.out.println("Erro ao inserir cliente: " + ex.getMessage());
        }
    }

    // Funcionalidade READ comentada por : Joelma Giovanna Barbosa Ferreira Rocha

    // Este metodo xibe todos os clientes do banco de dados.
    // Ele precisa executar uma consulta SQL (SELECT * FROM clientes;)
    // e mostra cada cliente com seus atributos (ID, nome, email, telefone, CPF, e data de cadastro). Se não houver nenhum cliente no banco, ele exibe uma mensagem informando isso.

    public static void readClientes() {
        // Declara a instrução SQL que será executada para selecionar todos os registros da tabela 'clientes'
        String sql = "SELECT * FROM clientes;";
        // Neste bloco ele irá obter uma conexão com o banco de dados e preparar
        // a instrução SQL para ser executada no banco.
        // Em seguida executa a consulta e armazena o resultado em um ResultSet
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            ResultSet rs = stmt.executeQuery();
            // Verifica se o ResultSet está vazio (sem clientes encontrados)
            if (!rs.isBeforeFirst()) {
                System.out.println("Nenhum cliente encontrado.");
            }
            // Essa parte do código esta percorrendo o resultado da consulta SQL para acessar cada cliente encontrado.
            while (rs.next()) {
                //pega os dados do cliente a partir do ResultSet
                int idCliente = rs.getInt("idCliente");
                String nome = rs.getString("nome");
                String email = rs.getString("email");
                String telefone = rs.getString("telefone");
                String cpf = rs.getString("cpf");
                java.sql.Date dataCadastro = rs.getDate("data_cadastro");
            // Exibe os dados do cliente no console
                System.out.println("");
                System.out.println("Id: " + idCliente);
                System.out.println("Dados do cliente " + nome + ":");
                System.out.println("Email: " + email);
                System.out.println("Telefone: " + telefone);
                System.out.println("CPF: " + cpf);
                System.out.println("Data de cadastro: " + dataCadastro);
            }
        } catch (SQLException ex) {
            // Para possíveis erros de SQL e exibe uma mensagem de erro no console
            System.out.println("Erro na consulta SQL. ERRO: " + ex.getMessage());
        }
    }

        //Neste metodo, usaremos o readClienteID para realizar buscas de cliente especificamente por seus IDs.
    public static void readClienteID() {
        // Inicializa um scanner para ler a entrada do usuário
        Scanner scanner = new Scanner(System.in);

        System.out.print("Digite o ID do cliente que deseja pesquisar: ");
        int idCliente = scanner.nextInt();

        // Declara a instrução SQL para selecionar um cliente específico com base no ID fornecido
        String sql = "SELECT * FROM clientes WHERE idCliente = ?;";

        // Mais uma vez utilizaremos a conexao com o banco de dados e armazenaremos no ResultSet.
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            // Define o valor do parâmetro (ID do cliente) na instrução SQL
            stmt.setInt(1, idCliente);
            ResultSet rs = stmt.executeQuery();
            // faz uma verificação se algum cliente foi encontrado e em seguida pega os dados do cliente a partir do ResultSet
            if (!rs.isBeforeFirst()) {
                System.out.println("Nenhum cliente encontrado com o ID: " + idCliente);
            } else {
                while (rs.next()) {
                    String nome = rs.getString("nome");
                    String email = rs.getString("email");
                    String telefone = rs.getString("telefone");
                    String cpf = rs.getString("cpf");
                    java.sql.Date dataCadastro = rs.getDate("data_cadastro");
                    // Exibe os dados do cliente encontrado
                    System.out.println("");
                    System.out.println("Id: " + idCliente);
                    System.out.println("Dados do cliente " + nome + ":");
                    System.out.println("Email: " + email);
                    System.out.println("Telefone: " + telefone);
                    System.out.println("CPF: " + cpf);
                    System.out.println("Data de cadastro: " + dataCadastro);
                }
            }
        } catch (SQLException ex) {
            // Para possíveis erros de SQL e exibe uma mensagem de erro no console
            System.out.println("Erro na consulta SQL. ERRO: " + ex.getMessage());
        }
    }


    public static void updateCliente() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Digite o ID do cliente: ");
        int idCliente = scanner.nextInt();
        scanner.nextLine();

        if (verifyClientes(idCliente)) {
            String selectSql = "SELECT nome, email, telefone, cpf, data_cadastro FROM clientes WHERE idCliente = ?";
            try (Connection conexao = ConexaoBanco.obterConexao();
                 PreparedStatement selectStmt = conexao.prepareStatement(selectSql)) {

                selectStmt.setInt(1, idCliente);
                ResultSet rs = selectStmt.executeQuery();

                if (rs.next()) {
                    System.out.println("Dados atuais do cliente:");
                    System.out.println("Nome: " + rs.getString("nome"));
                    System.out.println("Email: " + rs.getString("email"));
                    System.out.println("Telefone: " + rs.getString("telefone"));
                    System.out.println("CPF: " + rs.getString("cpf"));
                    System.out.println("Data de Cadastro: " + rs.getDate("data_cadastro"));
                } else {
                    System.out.println("Cliente não encontrado.");
                    return;
                }

                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                System.out.println("Digite as atualizações do cliente: ");

                System.out.print("Insira o novo email do cliente: ");
                String email = scanner.nextLine();

                System.out.print("Insira o novo número de telefone do cliente: ");
                String telefone = scanner.nextLine();

                System.out.print("Insira a nova data de cadastro (dd/MM/yyyy): ");
                String data_cadastroStr = scanner.nextLine();
                LocalDate data_cadastro = LocalDate.parse(data_cadastroStr, formatter);

                System.out.print("Insira o novo CPF do cliente: ");
                String cpf = scanner.nextLine();

                String updateSql = "UPDATE clientes SET email = ?, telefone = ?, cpf = ?, data_cadastro = ? WHERE idCliente = ?";
                try (PreparedStatement updateStmt = conexao.prepareStatement(updateSql)) {
                    updateStmt.setString(1, email);
                    updateStmt.setString(2, telefone);
                    updateStmt.setString(3, cpf);
                    updateStmt.setDate(4, Date.valueOf(data_cadastro));
                    updateStmt.setInt(5, idCliente);

                    int linhasAfetadas = updateStmt.executeUpdate();
                    if (linhasAfetadas > 0) {
                        System.out.println(linhasAfetadas + " cliente atualizado com sucesso.");
                    } else {
                        System.out.println("Nenhum cliente foi atualizado.");
                    }
                }
            } catch (SQLException ex) {
                System.out.println("Erro ao acessar o banco de dados: " + ex.getMessage());
            }
        } else {
            System.out.println("Cliente não encontrado. Atualização não realizada.");
        }
    }


    public static void deleteCliente() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Digite o ID do cliente a ser deletado: ");
        int idCliente = scanner.nextInt();

        if (verifyClientes(idCliente)) {
            String sql = "DELETE FROM clientes WHERE idCliente = ?;";

            try (Connection conexao = ConexaoBanco.obterConexao();
                 PreparedStatement stmt = conexao.prepareStatement(sql)) {
                stmt.setInt(1, idCliente);
                int linhasAfetadas = stmt.executeUpdate();

                if (linhasAfetadas > 0) {
                    System.out.println("Cliente deletado com sucesso.");
                } else {
                    System.out.println("Nenhum cliente foi deletado.");
                }
            } catch (SQLException ex) {
                System.out.println("Erro ao deletar cliente: " + ex.getMessage());
            }
        } else {
            System.out.println("Cliente não encontrado.");
        }
    }


    public static boolean verifyClientes(int idCliente) {
        String sql = "SELECT COUNT(*) FROM clientes WHERE idCliente = ?";
        try (Connection conexao = ConexaoBanco.obterConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            stmt.setInt(1, idCliente);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException ex) {
            System.out.println("Erro ao verificar cliente: " + ex.getMessage());
        }
        return false;
    }
}
